//! Autogenerated weights for pallet_xode_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 43.0.0
//! DATE: 2024-12-19, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `DESKTOP-UKLAK32`, CPU: `Intel(R) Core(TM) i5-10400 CPU @ 2.90GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// target/release/xode-node
// benchmark
// pallet
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --pallet
// pallet-xode-staking
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// ./pallets/staking/src/weights.rs
// --template
// ./pallets/staking/src/weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_xode_staking.
pub trait WeightInfo {
  fn register_candidate() -> Weight;
  fn bond_candidate() -> Weight;
  fn set_commission_of_candidate() -> Weight;
  fn leave_candidate() -> Weight;
  fn stake_candidate() -> Weight;
  fn unstake_candidate() -> Weight;
  fn offline_candidate() -> Weight;
  fn online_candidate() -> Weight;
}

/// Weights for pallet_xode_staking using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
  /// Storage: `XodeStaking::ProposedCandidates` (r:1 w:1)
  /// Proof: `XodeStaking::ProposedCandidates` (`max_values`: Some(1), `max_size`: Some(7102), added: 7597, mode: `MaxEncodedLen`)
  fn register_candidate() -> Weight {
    // Proof Size summary in bytes:
    //  Measured:  `3`
    //  Estimated: `8587`
    // Minimum execution time: 13_700_000 picoseconds.
    Weight::from_parts(14_300_000, 8587)
      .saturating_add(T::DbWeight::get().reads(1_u64))
      .saturating_add(T::DbWeight::get().writes(1_u64))
  }
  /// Storage: `XodeStaking::ProposedCandidates` (r:1 w:1)
  /// Proof: `XodeStaking::ProposedCandidates` (`max_values`: Some(1), `max_size`: Some(7102), added: 7597, mode: `MaxEncodedLen`)
  fn bond_candidate() -> Weight {
    // Proof Size summary in bytes:
    //  Measured:  `173`
    //  Estimated: `8587`
    // Minimum execution time: 36_600_000 picoseconds.
    Weight::from_parts(37_300_000, 8587)
      .saturating_add(T::DbWeight::get().reads(1_u64))
      .saturating_add(T::DbWeight::get().writes(1_u64))
  }
  /// Storage: `XodeStaking::ProposedCandidates` (r:1 w:1)
  /// Proof: `XodeStaking::ProposedCandidates` (`max_values`: Some(1), `max_size`: Some(7102), added: 7597, mode: `MaxEncodedLen`)
  /// Storage: `XodeStaking::WaitingCandidates` (r:1 w:0)
  /// Proof: `XodeStaking::WaitingCandidates` (`max_values`: Some(1), `max_size`: Some(3202), added: 3697, mode: `MaxEncodedLen`)
  fn set_commission_of_candidate() -> Weight {
    // Proof Size summary in bytes:
    //  Measured:  `173`
    //  Estimated: `8587`
    // Minimum execution time: 18_900_000 picoseconds.
    Weight::from_parts(19_500_000, 8587)
      .saturating_add(T::DbWeight::get().reads(2_u64))
      .saturating_add(T::DbWeight::get().writes(1_u64))
  }
  /// Storage: `XodeStaking::ProposedCandidates` (r:1 w:1)
  /// Proof: `XodeStaking::ProposedCandidates` (`max_values`: Some(1), `max_size`: Some(7102), added: 7597, mode: `MaxEncodedLen`)
  /// Storage: `XodeStaking::WaitingCandidates` (r:1 w:1)
  /// Proof: `XodeStaking::WaitingCandidates` (`max_values`: Some(1), `max_size`: Some(3202), added: 3697, mode: `MaxEncodedLen`)
  fn leave_candidate() -> Weight {
    // Proof Size summary in bytes:
    //  Measured:  `228`
    //  Estimated: `8587`
    // Minimum execution time: 24_200_000 picoseconds.
    Weight::from_parts(24_600_000, 8587)
      .saturating_add(T::DbWeight::get().reads(2_u64))
      .saturating_add(T::DbWeight::get().writes(2_u64))
  }
  /// Storage: `XodeStaking::ProposedCandidates` (r:1 w:1)
  /// Proof: `XodeStaking::ProposedCandidates` (`max_values`: Some(1), `max_size`: Some(7102), added: 7597, mode: `MaxEncodedLen`)
  /// Storage: `XodeStaking::Delegations` (r:1 w:1)
  /// Proof: `XodeStaking::Delegations` (`max_values`: None, `max_size`: Some(9642), added: 12117, mode: `MaxEncodedLen`)
  fn stake_candidate() -> Weight {
    // Proof Size summary in bytes:
    //  Measured:  `102`
    //  Estimated: `13107`
    // Minimum execution time: 49_700_000 picoseconds.
    Weight::from_parts(50_500_000, 13107)
      .saturating_add(T::DbWeight::get().reads(2_u64))
      .saturating_add(T::DbWeight::get().writes(2_u64))
  }
  /// Storage: `XodeStaking::Delegations` (r:1 w:1)
  /// Proof: `XodeStaking::Delegations` (`max_values`: None, `max_size`: Some(9642), added: 12117, mode: `MaxEncodedLen`)
  /// Storage: `XodeStaking::ProposedCandidates` (r:1 w:1)
  /// Proof: `XodeStaking::ProposedCandidates` (`max_values`: Some(1), `max_size`: Some(7102), added: 7597, mode: `MaxEncodedLen`)
  fn unstake_candidate() -> Weight {
    // Proof Size summary in bytes:
    //  Measured:  `288`
    //  Estimated: `13107`
    // Minimum execution time: 49_200_000 picoseconds.
    Weight::from_parts(49_800_000, 13107)
      .saturating_add(T::DbWeight::get().reads(2_u64))
      .saturating_add(T::DbWeight::get().writes(2_u64))
  }
  /// Storage: `XodeStaking::ProposedCandidates` (r:1 w:1)
  /// Proof: `XodeStaking::ProposedCandidates` (`max_values`: Some(1), `max_size`: Some(7102), added: 7597, mode: `MaxEncodedLen`)
  fn offline_candidate() -> Weight {
    // Proof Size summary in bytes:
    //  Measured:  `102`
    //  Estimated: `8587`
    // Minimum execution time: 17_800_000 picoseconds.
    Weight::from_parts(18_000_000, 8587)
      .saturating_add(T::DbWeight::get().reads(1_u64))
      .saturating_add(T::DbWeight::get().writes(1_u64))
  }
  /// Storage: `XodeStaking::ProposedCandidates` (r:1 w:1)
  /// Proof: `XodeStaking::ProposedCandidates` (`max_values`: Some(1), `max_size`: Some(7102), added: 7597, mode: `MaxEncodedLen`)
  fn online_candidate() -> Weight {
    // Proof Size summary in bytes:
    //  Measured:  `102`
    //  Estimated: `8587`
    // Minimum execution time: 17_400_000 picoseconds.
    Weight::from_parts(17_900_000, 8587)
      .saturating_add(T::DbWeight::get().reads(1_u64))
      .saturating_add(T::DbWeight::get().writes(1_u64))
  }
}


// For backwards compatibility and tests
impl WeightInfo for () {
  /// Storage: `XodeStaking::ProposedCandidates` (r:1 w:1)
  /// Proof: `XodeStaking::ProposedCandidates` (`max_values`: Some(1), `max_size`: Some(7102), added: 7597, mode: `MaxEncodedLen`)
  fn register_candidate() -> Weight {
    // Proof Size summary in bytes:
    //  Measured:  `3`
    //  Estimated: `8587`
    // Minimum execution time: 13_700_000 picoseconds.
    Weight::from_parts(14_300_000, 8587)
      .saturating_add(RocksDbWeight::get().reads(1_u64))
      .saturating_add(RocksDbWeight::get().writes(1_u64))
  }
  /// Storage: `XodeStaking::ProposedCandidates` (r:1 w:1)
  /// Proof: `XodeStaking::ProposedCandidates` (`max_values`: Some(1), `max_size`: Some(7102), added: 7597, mode: `MaxEncodedLen`)
  fn bond_candidate() -> Weight {
    // Proof Size summary in bytes:
    //  Measured:  `173`
    //  Estimated: `8587`
    // Minimum execution time: 36_600_000 picoseconds.
    Weight::from_parts(37_300_000, 8587)
      .saturating_add(RocksDbWeight::get().reads(1_u64))
      .saturating_add(RocksDbWeight::get().writes(1_u64))
  }
  /// Storage: `XodeStaking::ProposedCandidates` (r:1 w:1)
  /// Proof: `XodeStaking::ProposedCandidates` (`max_values`: Some(1), `max_size`: Some(7102), added: 7597, mode: `MaxEncodedLen`)
  /// Storage: `XodeStaking::WaitingCandidates` (r:1 w:0)
  /// Proof: `XodeStaking::WaitingCandidates` (`max_values`: Some(1), `max_size`: Some(3202), added: 3697, mode: `MaxEncodedLen`)
  fn set_commission_of_candidate() -> Weight {
    // Proof Size summary in bytes:
    //  Measured:  `173`
    //  Estimated: `8587`
    // Minimum execution time: 18_900_000 picoseconds.
    Weight::from_parts(19_500_000, 8587)
      .saturating_add(RocksDbWeight::get().reads(2_u64))
      .saturating_add(RocksDbWeight::get().writes(1_u64))
  }
  /// Storage: `XodeStaking::ProposedCandidates` (r:1 w:1)
  /// Proof: `XodeStaking::ProposedCandidates` (`max_values`: Some(1), `max_size`: Some(7102), added: 7597, mode: `MaxEncodedLen`)
  /// Storage: `XodeStaking::WaitingCandidates` (r:1 w:1)
  /// Proof: `XodeStaking::WaitingCandidates` (`max_values`: Some(1), `max_size`: Some(3202), added: 3697, mode: `MaxEncodedLen`)
  fn leave_candidate() -> Weight {
    // Proof Size summary in bytes:
    //  Measured:  `228`
    //  Estimated: `8587`
    // Minimum execution time: 24_200_000 picoseconds.
    Weight::from_parts(24_600_000, 8587)
      .saturating_add(RocksDbWeight::get().reads(2_u64))
      .saturating_add(RocksDbWeight::get().writes(2_u64))
  }
  /// Storage: `XodeStaking::ProposedCandidates` (r:1 w:1)
  /// Proof: `XodeStaking::ProposedCandidates` (`max_values`: Some(1), `max_size`: Some(7102), added: 7597, mode: `MaxEncodedLen`)
  /// Storage: `XodeStaking::Delegations` (r:1 w:1)
  /// Proof: `XodeStaking::Delegations` (`max_values`: None, `max_size`: Some(9642), added: 12117, mode: `MaxEncodedLen`)
  fn stake_candidate() -> Weight {
    // Proof Size summary in bytes:
    //  Measured:  `102`
    //  Estimated: `13107`
    // Minimum execution time: 49_700_000 picoseconds.
    Weight::from_parts(50_500_000, 13107)
      .saturating_add(RocksDbWeight::get().reads(2_u64))
      .saturating_add(RocksDbWeight::get().writes(2_u64))
  }
  /// Storage: `XodeStaking::Delegations` (r:1 w:1)
  /// Proof: `XodeStaking::Delegations` (`max_values`: None, `max_size`: Some(9642), added: 12117, mode: `MaxEncodedLen`)
  /// Storage: `XodeStaking::ProposedCandidates` (r:1 w:1)
  /// Proof: `XodeStaking::ProposedCandidates` (`max_values`: Some(1), `max_size`: Some(7102), added: 7597, mode: `MaxEncodedLen`)
  fn unstake_candidate() -> Weight {
    // Proof Size summary in bytes:
    //  Measured:  `288`
    //  Estimated: `13107`
    // Minimum execution time: 49_200_000 picoseconds.
    Weight::from_parts(49_800_000, 13107)
      .saturating_add(RocksDbWeight::get().reads(2_u64))
      .saturating_add(RocksDbWeight::get().writes(2_u64))
  }
  /// Storage: `XodeStaking::ProposedCandidates` (r:1 w:1)
  /// Proof: `XodeStaking::ProposedCandidates` (`max_values`: Some(1), `max_size`: Some(7102), added: 7597, mode: `MaxEncodedLen`)
  fn offline_candidate() -> Weight {
    // Proof Size summary in bytes:
    //  Measured:  `102`
    //  Estimated: `8587`
    // Minimum execution time: 17_800_000 picoseconds.
    Weight::from_parts(18_000_000, 8587)
      .saturating_add(RocksDbWeight::get().reads(1_u64))
      .saturating_add(RocksDbWeight::get().writes(1_u64))
  }
  /// Storage: `XodeStaking::ProposedCandidates` (r:1 w:1)
  /// Proof: `XodeStaking::ProposedCandidates` (`max_values`: Some(1), `max_size`: Some(7102), added: 7597, mode: `MaxEncodedLen`)
  fn online_candidate() -> Weight {
    // Proof Size summary in bytes:
    //  Measured:  `102`
    //  Estimated: `8587`
    // Minimum execution time: 17_400_000 picoseconds.
    Weight::from_parts(17_900_000, 8587)
      .saturating_add(RocksDbWeight::get().reads(1_u64))
      .saturating_add(RocksDbWeight::get().writes(1_u64))
  }
}
